@page "/movies"
@using BMDb.BlazorApp.Models
@using BMDb.BlazorApp.Services
@inject IAsyncMovieService Service

<PageTitle>BMDb</PageTitle>

@if (_movies == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="container pt-5">
        <div class="row">
            @foreach (var item in _pagination!.Items)
            {
                <div class="col-md-4 mb-4">
                    @if (!string.IsNullOrEmpty(item.Poster))
                    {
                        <img src="@item.Poster" class="card-img-top rounded" alt="@item.Title Poster">
                    }

                    <div class="card mt-3 bg-dark text-white">
                        <div class="card-body">
                            <h5 style="color: #badce3" class="card-title">@item.Title</h5>
                            <p class="card-text">
                                <strong>Year:</strong> @item.Year<br/>
                                <strong>Genre:</strong> @item.Genre<br/>
                                <strong>Director:</strong> @item.Director<br/>
                                <strong>IMDb Id:</strong> @item.ImdbId<br/>
                            </p>
                            <p class="card-text">@item.Plot</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="pagination">
        @if (_pagination.HasPreviousPage)
        {
            <a class="btn btn-custom" @onclick="@(async () => await PreviousPage())">Previous</a>
        }
        @if (_pagination.HasNextPage)
        {
            <a class="btn btn-custom" @onclick="@(async () => await NextPage())">Next</a>
        }
    </div>
}

@code {
    private PaginationModel<MovieModel>? _pagination;
    private List<MovieModel>? _movies;

    protected override async Task OnInitializedAsync()
    {
        await SelectedPage(1);
        StateHasChanged();
    }

    private async Task SelectedPage(int page)
    {
        await LoadMovieDetails(page, 10);
        StateHasChanged();
    }

    private async Task LoadMovieDetails(int currentPage, int pageSize)
    {
        _movies = await Service.GetMoviesAsync();
        var data = _movies.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();

        _pagination = new PaginationModel<MovieModel>(data, currentPage, pageSize, _movies.Count);
        StateHasChanged();
    }

    private async Task NextPage()
    {
        await LoadMovieDetails(_pagination!.Page + 1, _pagination.PageSize);
        StateHasChanged();
    }

    private async Task PreviousPage()
    {
        await LoadMovieDetails(_pagination!.Page - 1, _pagination.PageSize);
        StateHasChanged();
    }

}